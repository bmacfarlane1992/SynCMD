pro extinct_vec, arch_dir=arch_dir, sim1=sim1, sim2=sim2, tag=tag, stars=stars, gas=gas, $
x_0=x_0, y_0=y_0, z_0=z_0, help=help
;
; - - Procedure written to calculate extinction from observers line of sight, using gas distr.
; - - impeding on observation of star
;
; NOTES:
;	- R_SL defined as 0.5*smoothing length to adhere to kernel distribution properties
;	- 
;
; = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
; = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
if (keyword_set(help) eq 1) then begin
   Message, 'Usage:',/info
   Message, 'extinct, stars=stars, gas=gas, help=help', /info
   Message, 'Purpose: Calculate associated column density and hence extinction ', /info
   Message, '         level for selected steller particles', /info
   Message, 'Input:   stars = Data array of spatially cut stellar population', /info
   Message, '	      gas = Data array of gas distribution extended around $stars$', /info
   Message, 'Outputs: stars = Data array of stellar population as input, with', /info
   Message, '	      attached tags of both column density and extincton as', /info
   Message, '	      as required by SynCMD', /info
   return
endif
;
;
; - - - VARIABLE DEFINITIONS - - - ;
;
	numstar=n_elements(stars(0,*))
	numgas=n_elements(gas(0,*))
;
; - - -	MAIN PROGRAM - - - ;
;
N_H=fltarr(1,numstar)
SAv=fltarr(1,numstar)
L=fltarr(1,numgas)
R_SL=dblarr(1,numgas)
N_H_GAS=dblarr(1,numgas)
N_H_CD=dblarr(1,numgas)

for i=0L, 0 do begin ;numstar-1 do begin
N_H_TOT=0
	for j=0L, numgas-1 do begin
;
		R_SL(j)=0.5*(3.43e-3*(gas(3,j)/(gas(4,j)^0.33)))
		N_H_CD(j)=1.26e14*(gas(5,j)*gas(3,j))/(!dpi*(R_SL(j))^2)
;
		L(j)=sqrt(((gas(1,j)-y_0)*(stars(2,i)-z_0)-(stars(1,i)-y_0)*(gas(2,j)-z_0))^2 + $
			((gas(2,j)-z_0)*(stars(0,i)-x_0)-(stars(2,i)-z_0)*(gas(0,j)-x_0))^2 + $
			((gas(0,j)-x_0)*(stars(1,i)-y_0)-(stars(0,i)-x_0)*(gas(1,j)-y_0))^2)
;
		if (L(j) lt 2*R_SL(j)) AND (L(j) gt 0) then begin
			if (L(j) gt 0) AND (L(j) le R_SL(j)) then $
			N_H_GAS(j) = N_H_CD(j)*(10/(7*!dpi*(R_SL(j))^2))*((0.25*(2-(L(j)/R_SL(j)))^3)-(1-(L(j)/R_SL(j)))^3)
;
			if (L(j) ge R_SL(j)) AND (L(j) lt 2*R_SL(j)) then $
			N_H_GAS(j) = N_H_CD(j)*(10/(7*!dpi*(R_SL(j))^2))*(0.25*(2-(L(j)/R_SL(j)))^3)*(0.25*(2-(L(j)/R_SL(j)))^3)
;
			L(j)=0
		endif
	N_H_TOT=N_H_TOT+N_H_GAS(j)
	endfor
print, "Star particle", i, " has been looped over, the column density is", N_H_TOT
endfor
print, 'L range: ', minmax(L)
print, 'Smoothing length range: ', minmax(R_SL)
print, 'Max. column density range: ', minmax(N_H_CD)
print, 'Intersecting column density range: ', minmax(N_H_GAS)
;
;
return
end
